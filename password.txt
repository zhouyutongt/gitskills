import java.util.Scanner;
import java.util.Random;

public class PasswordManager {

    public static String encryptPassword(String password) {
        StringBuilder encryptedPassword = new StringBuilder();
        for (int i = 0; i < password.length(); i++) {
            char encryptedChar = (char) (password.charAt(i) + i + 3);
            encryptedPassword.append(encryptedChar);
        }
        encryptedPassword = new StringBuilder(encryptedPassword.substring(encryptedPassword.length() - 1)
                + encryptedPassword.substring(1, encryptedPassword.length() - 1)
                + encryptedPassword.charAt(0));
        return encryptedPassword.reverse().toString();

    }

    public static String decryptPassword(String encryptedPassword) {
        encryptedPassword = new StringBuilder(encryptedPassword).reverse().toString();
        encryptedPassword = encryptedPassword.charAt(0)
                + encryptedPassword.substring(2, encryptedPassword.length() - 1)
                + encryptedPassword.charAt(1);
        StringBuilder decryptedPassword = new StringBuilder();
        for (int i = 0; i < encryptedPassword.length(); i++) {
            char decryptedChar = (char) (encryptedPassword.charAt(i) - i - 3);
            decryptedPassword.append(decryptedChar);
        }
        return decryptedPassword.toString();
    }

    public static String checkPasswordStrength(String password) {
        if (password.length() < 8 || password.chars().allMatch(Character::isDigit)
                || password.chars().allMatch(Character::isLetter)) {
            return "弱";
        } else if (password.length() >= 8 && password.matches(".*\\d.*") && password.matches(".*[a-zA-Z].*")) {
            if (password.matches(".*[a-z].*") && password.matches(".*[A-Z].*")) {
                return "强";
            } else {
                return "中等";
            }
        } else {
            return "弱";
        }
    }

    public static String generatePassword(int length) {
        String characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        StringBuilder generatedPassword = new StringBuilder();
        Random random = new Random();
        for (int i = 0; i < length; i++) {
            generatedPassword.append(characters.charAt(random.nextInt(characters.length())));
        }
        return generatedPassword.toString();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\n菜单:");
            System.out.println("1. 加密密码");
            System.out.println("2. 解密密码");
            System.out.println("3. 检查密码强度");
            System.out.println("4. 生成密码");
            System.out.println("5. 退出");

            System.out.print("输入你的选择: ");
            String choice = scanner.nextLine();

            switch (choice) {
                case "1":
                    System.out.print("输入需要加密的密码: ");
                    String passwordToEncrypt = scanner.nextLine();
                    String encryptedPassword = encryptPassword(passwordToEncrypt);
                    System.out.println("Encrypted Password: " + encryptedPassword);
                    break;
                case "2":
                    System.out.print("输入需要解密的密码：");
                    String passwordToDecrypt = scanner.nextLine();
                    String decryptedPassword = decryptPassword(passwordToDecrypt);
                    System.out.println("Decrypted Password: " + decryptedPassword);
                    break;
                case "3":
                    System.out.print("输入密码检查强度： ");
                    String passwordToCheck = scanner.nextLine();
                    String strength = checkPasswordStrength(passwordToCheck);
                    System.out.println("Password Strength: " + strength);
                    break;
                case "4":
                    System.out.print("输入生成密码的强度: ");
                    int passwordLength = scanner.nextInt();
                    scanner.nextLine(); // Consume newline character
                    String generatedPassword = generatePassword(passwordLength);
                    System.out.println("生成密码: " + generatedPassword);
                    break;
                case "5":
                    System.out.println("退出程序，再见！");
                    scanner.close();
                    System.exit(0);
                    break;
                default:
                    System.out.println("无效选择！请输入1-5");
            }

        }
    }
}